# hook_add 	プラグインが dein.vim によって追加されたとき 	OK 	OK
# hook_source 	プラグインが読み込まれる直前 	NG 	OK
# hook_post_source 	プラグインが読み込まれた直後 	NG 	OK
# hook_post_update 	プラグインが更新された直後 	OK 	OK
# hook_done_update 	プラグイン全ての更新が終わった直後 	OK 	OK

[[plugins]]
repo = 'Shougo/dein.vim'

#[[plugins]]
#repo = 'rhysd/nyaovim-markdown-preview'
#hook_add = '''
#  let g:markdown_preview_eager = 1
#'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'previm/previm'
hook_add = '''
  let g:previm_open_cmd = 'firefox'
'''

[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim', 'vim-textobj-user']
hook_add = '''
let g:context_filetype#filetypes = {
      \ 'sh': [
      \   {
      \    'start': '[^<]<<\([''"]\?\)\([a-zA-Z0-9]\+\)\1$',
      \    'end': '^\1$', 'filetype': '\2',
      \   },
      \ ],
      \}"}}}
'''

# markdown table
[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap <CR> <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap <CR> <Plug>(EasyAlign)

" " Alignを日本語環境で使用するための設定
" :let g:Align_xstrlen = 3
" ":AlignCtrl p0P0
'''


[[plugins]] # カーソル位置のコンテキストのftを判定するライブラリ
repo = 'Shougo/context_filetype.vim'

[[plugins]] # vim-precious で <Plug>(textobj-precious-i) を使用したい時に必要。
repo = 'kana/vim-textobj-user'

[[plugins]] # toml syntax
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]] # syntax
repo = 'fleischie/vim-styled-components'
on_ft = ['javascript', 'javascript.jsx']

# カラースキーマ 一番したが有効
#[[plugins]] # not hilighted h1 in md
#repo = 'nanotech/jellybeans.vim'
#hook_add = '''
#  set background=dark
#  au MyAutoCmd VimEnter * nested colorscheme jellybeans
#  let g:jellybeans_overrides = {
#  \    'background': { 'ctermbg': 'none', '256ctermbg': 'none' },
#  \}
#'''
#[[plugins]] # not hilighted h1 in md
#repo = 'tomasr/molokai'
#hook_add = '''
#  set background=dark
#  let g:molokai_original = 1
#  "let g:rehash256 = 1
#  au MyAutoCmd VimEnter * nested colorscheme molokai
#'''
#[[plugins]]  # not hilight h1 in md
#repo = 'aereal/vim-colors-japanesque'
#hook_add = '''
#  set background=dark
#  au MyAutoCmd VimEnter * nested colorscheme japanesque
#'''
#[[plugins]]  # not hilight h1 in md
#repo = 'joshdick/onedark.vim'
#hook_add = '''
#  "set background=dark
#  au MyAutoCmd VimEnter * nested colorscheme onedark
#  au MyAutoCmd VimEnter * highlight Visual ctermbg=216
#  " Makes the background transparent
#  au MyAutoCmd VimEnter * nested highlight Normal ctermbg=NONE guibg=NONE
#  au MyAutoCmd VimEnter * nested highlight NonText ctermbg=NONE guibg=NONE
#'''
#[[plugins]]  # not hilight h1 in md
#repo = 'mhartington/oceanic-next'
#hook_add = '''
#  set background=dark
#  au MyAutoCmd VimEnter * nested colorscheme OceanicNext
#  au MyAutoCmd VimEnter * highlight Visual ctermbg=216
#  " " Makes the background transparent
#  " au MyAutoCmd VimEnter * nested highlight Normal ctermbg=NONE guibg=NONE
#  " au MyAutoCmd VimEnter * nested highlight NonText ctermbg=NONE guibg=NONE
#'''
#[[plugins]] # not so good main text in md
#repo = 'altercation/vim-colors-solarized'
#hook_add = '''
#  set background=dark
#  au MyAutoCmd VimEnter * nested colorscheme solarized
#  let g:solarized_termcolors=256
#  let g:solarized_termtrans = 1 
#  "let g:solarized_bold = 1 | 0 
#  "let g:solarized_underline = 1 | 0 
#  "let g:solarized_italic = 1 | 0 
#  "let g:solarized_contrast = "normal"| "high" or "low" 
#  "let g:solarized_visibility= "normal"| "high" or "low" 
#'''
#[[plugins]] # bad in cursol, bad in comment
#repo = 'w0ng/vim-hybrid'
#hook_add = '''
#  let g:hybrid_custom_term_colors = 1
#  "let g:hybrid_reduced_contrast = 0
#  set background=dark
#  " colorscheme 設定は source 後に行う必要があるので VimEnter で行う。
#  " 但し Colorscheme イベントの発生が抑制されないよう nented を付ける。
#  au MyAutoCmd VimEnter * nested colorscheme hybrid
#'''
[[plugins]]
repo = 'morhetz/gruvbox'
hook_add = '''
  set background=dark
  let g:gruvbox_italic=1
  autocmd VimEnter * highlight Visual guibg=#a89984
  augroup markdown_highlight
    autocmd!
    autocmd ColorScheme * highlight htmlH1 gui=bold guifg=#bae1ff "#f1f9b5
    autocmd ColorScheme * highlight htmlH2 gui=bold guifg=#baffc9 "#beeae0
    autocmd ColorScheme * highlight htmlH3 gui=bold guifg=#ffffba "#b8d1fb
    autocmd ColorScheme * highlight htmlH4 gui=bold guifg=#ffdfba "#f6bcd7
    autocmd ColorScheme * highlight htmlH5 gui=bold guifg=#ffb3ba
    autocmd ColorScheme * highlight htmlH6 gui=bold guifg=#cfa5f2 "#f48fb1
    autocmd ColorScheme * highlight htmlBold gui=bold
    autocmd ColorScheme * highlight mkdNonListItemBlock guifg=#ffffff
    autocmd ColorScheme * highlight mkdCode guifg=white guibg=darkgreen
  augroup END
  colorscheme gruvbox

  " " Makes the background transparent
  " au MyAutoCmd VimEnter * nested highlight Normal ctermbg=NONE guibg=NONE
  " au MyAutoCmd VimEnter * nested highlight NonText ctermbg=NONE guibg=NONE
'''

[[plugins]]
#repo = 'ap/vim-css-color'
repo = 'chrisbra/Colorizer'
hook_add = '''
  let g:colorizer_auto_color=1
'''

[[plugins]]
repo = 'sheerun/vim-polyglot'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]] # コード補完
repo = 'Shougo/deoplete.nvim'
#depends = 'context_filetype.vim'
on_event = 'InsertEnter'
hook_source = '''
  let g:deoplete#enable_at_startup = 1
  let g:deoplete#enable_ignore_case = 1
  let g:deoplete#enable_smart_case = 1
  set completeopt-=preview " プレビューウィンドウを開かないようにする
  "set completeopt+=noinsert " 最初の候補がデフォで選択されるようにする
  setlocal dictionary+=~/.config/nvim/dicts/google-10000-english-usa-no-swears.dict
  
  " Remove this if you'd like to use fuzzy search
  "call deoplete#custom#source(
  "\ 'dictionary', 'matchers', ['matcher_head'])
  
  " If dictionary is already sorted, no need to sort it again.
  "call deoplete#custom#source(
  "\ 'dictionary', 'sorters', [])
  
  " Do not complete too short words
  call deoplete#custom#source(
  \ 'dictionary', 'min_pattern_length', 2)
  
  " Enable buffer source in C/C++ files only.
  "call deoplete#custom#source(
  "\ 'dictionary', 'filetypes', ['c', 'cpp'])

  " python3が無かったらメッセージを表示
  if has('nvim') && !has('python3')
    echo "require python3 https://gist.github.com/kawaz/393c7f62fe6e857cc3d9 or execute 'pip3 install neovim --upgrade' and :call dein#update()"
  endif
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets']
on_i = 1
hook_post_source = '''
let g:neosnippet#enable_snipmate_compatibility = 1
let g:neosnippet#enable_complete_done = 1
let g:neosnippet#expand_word_boundary = 1
" スニペットディレクトリを設定（同じスニペットが見つかった場合は最初の先に見つかったほうが優先される)
let g:neosnippet#snippets_directory = get(g:, 'neosnippet#snippets_directory', [])
let g:neosnippet#snippets_directory += [$XDG_CONFIG_HOME . '/vim/rc/neosnippets']
if ! empty(dein#get('neosnippet-snippets'))
  let g:neosnippet#snippets_directory += [dein#get('neosnippet-snippets').path . '/neosnippets']
endif
" Plugin key-mappings. スニペット補完候補がある場合は C-k でスニペットを展開する（Enterではない）
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)
" " SuperTab like snippets behavior. スニペットのプレースホルダ上にいる時はTabで次のプレースホルダにジャンプする
" imap <expr><TAB> neosnippet#jumpable() ? '\<Plug>(neosnippet_expand_or_jump)' : pumvisible() ? '\<C-n>' : '\<TAB>'
" smap <expr><TAB> neosnippet#jumpable() ? '\<Plug>(neosnippet_expand_or_jump)' : '\<TAB>'
" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif
'''
[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'shougo/neco-syntax'

[[plugins]]
repo = 'plasticboy/vim-markdown'
hook_add = '''
"Default is ['c++=cpp', 'viml=vim', 'bash=sh', 'ini=dosini'].
"let g:vim_markdown_fenced_languages = ['csharp=cs']
let g:markdown_fenced_languages = ['bash=sh', 'css', 'django', 'handlebars', 'javascript', 'js=javascript', 'json=javascript', 'perl', 'php', 'python', 'ruby', 'sass', 'xml', 'html']
'''

[[plugins]]
repo = 'Yggdroot/indentLine'

[[plugins]]
repo = 'pangloss/vim-javascript'

[[plugins]]
repo = 'othree/yajs.vim'

[[plugins]]
repo = 'vim-scripts/diffchar.vim'
hook_add = '''
" F7でトグル
" vimdiffで起動した際自動的に単語単位の差分(diffchar.vim)を有効
if &diff
  augroup enable_diffchar
    autocmd!
    autocmd VimEnter * execute "%SDChar"
  augroup END
endif

"Char" : 全ての文字間
"Word1" : \w\+ と隣接する \W の境目
"Word2" : 非空白文字と空白文字の境目
"Word3" : \< または \> に該当する境目。vimオプションiskeywordの影響あり
"逆に言えばiskeywordを設定している場合"Word3"を指定すると便利です。
"CSV(,)" : カンマ(,)、セミコロン(;)及びタブ文字(\t)による境目
let g:DiffUnit = "Word3"
"編集中に差分ハイライトを自動で更新するかどうか 0更新しない 1更新する
let g:DiffUpdate = 1
'''

[[plugins]] # check javascript
repo = 'neomake/neomake'

[[plugins]]
repo = 'sjl/gundo.vim'
on_cmd = ['GundoToggle']

[[plugins]]
repo = 'Shougo/denite.nvim'

[[plugins]]
repo = 'Shougo/unite.vim'

[[plugins]]
repo = 'sgur/unite-everything'

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/neoyank.vim'

[[plugins]]
repo = 'Shougo/unite-outline'

[[plugins]]
repo = 'Shougo/vimshell'
rev= '3787e5'

# pluntumlのシンタクスハイライトと:makeコマンド
# *.pu か *.uml か *.plantuml 
[[plugins]]
repo = 'aklt/plantuml-syntax'
#NeoBundle 'vim-scripts/plantuml-syntax'

[[plugins]]
repo = 'scrooloose/vim-slumlord'

[[plugins]]
repo = 'fatih/vim-go'

[[plugins]]
repo = 'lambdalisue/vim-unified-diff'

[[plugins]]
repo = 'itchyny/calendar.vim'
hook_source = '''
  let g:calendar_google_calendar = 1
  let g:calendar_google_task = 1
  let g:calendar_event_start_time = 1
  let g:calendar_task_delete = 1
'''
[[plugins]]
repo = 'cakebaker/scss-syntax.vim'
